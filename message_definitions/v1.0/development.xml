<?xml version="1.0"?>
<mavlink>
  <!-- XML file for prototyping definitions for standard.xml  -->
  <include>standard.xml</include>
  <version>0</version>
  <dialect>0</dialect>
  <enums>
    <enum name="WIFI_NETWORK_SECURITY">
      <description>WiFi wireless security protocols.</description>
      <entry value="0" name="WIFI_NETWORK_SECURITY_UNDEFINED">
        <description>Undefined or unknown security protocol.</description>
      </entry>
      <entry value="1" name="WIFI_NETWORK_SECURITY_OPEN">
        <description>Open network, no security.</description>
      </entry>
      <entry value="2" name="WIFI_NETWORK_SECURITY_WEP">
        <description>WEP.</description>
      </entry>
      <entry value="3" name="WIFI_NETWORK_SECURITY_WPA1">
        <description>WPA1.</description>
      </entry>
      <entry value="4" name="WIFI_NETWORK_SECURITY_WPA2">
        <description>WPA2.</description>
      </entry>
      <entry value="5" name="WIFI_NETWORK_SECURITY_WPA3">
        <description>WPA3.</description>
      </entry>
    </enum>
    <enum name="AIRSPEED_SENSOR_TYPE">
      <description>Types of airspeed sensor/data. May be be used in AIRSPEED message to estimate accuracy of indicated speed.</description>
      <entry value="0" name="AIRSPEED_SENSOR_TYPE_UNKNOWN">
        <description>Airspeed sensor type unknown/not supplied.</description>
      </entry>
      <entry value="1" name="AIRSPEED_SENSOR_TYPE_DIFFERENTIAL">
        <description>Differential airspeed sensor</description>
      </entry>
      <entry value="2" name="AIRSPEED_SENSOR_TYPE_MASS_FLOW">
        <description>Mass-flow airspeed sensor.</description>
      </entry>
      <entry value="3" name="AIRSPEED_SENSOR_TYPE_WINDVANE">
        <description>Windvane airspeed sensor.</description>
      </entry>
      <entry value="4" name="AIRSPEED_SENSOR_TYPE_SYNTHETIC">
        <description>Synthetic/calculated airspeed.</description>
      </entry>
    </enum>
    <!-- Transactions for parameter protocol -->
    <enum name="PARAM_TRANSACTION_TRANSPORT">
      <description>Possible transport layers to set and get parameters via mavlink during a parameter transaction.</description>
      <entry value="0" name="PARAM_TRANSACTION_TRANSPORT_PARAM">
        <description>Transaction over param transport.</description>
      </entry>
      <entry value="1" name="PARAM_TRANSACTION_TRANSPORT_PARAM_EXT">
        <description>Transaction over param_ext transport.</description>
      </entry>
    </enum>
    <enum name="PARAM_TRANSACTION_ACTION">
      <description>Possible parameter transaction actions.</description>
      <entry value="0" name="PARAM_TRANSACTION_ACTION_START">
        <description>Commit the current parameter transaction.</description>
      </entry>
      <entry value="1" name="PARAM_TRANSACTION_ACTION_COMMIT">
        <description>Commit the current parameter transaction.</description>
      </entry>
      <entry value="2" name="PARAM_TRANSACTION_ACTION_CANCEL">
        <description>Cancel the current parameter transaction.</description>
      </entry>
    </enum>
    <enum name="MAV_STANDARD_MODE">
      <description>Standard modes with a well understood meaning across flight stacks and vehicle types.
        For example, most flight stack have the concept of a "return" or "RTL" mode that takes a vehicle to safety, even though the precise mechanics of this mode may differ.
        Modes may be set using MAV_CMD_DO_SET_STANDARD_MODE.
      </description>
      <entry value="0" name="MAV_STANDARD_MODE_NON_STANDARD">
        <description>Non standard mode.
          This may be used when reporting the mode if the current flight mode is not a standard mode.
        </description>
      </entry>
      <entry value="1" name="MAV_STANDARD_MODE_POSITION_HOLD">
        <description>Position mode (manual).
          Position-controlled and stabilized manual mode.
          When sticks are released vehicles return to their level-flight orientation and hold both position and altitude against wind and external forces.
          This mode can only be set by vehicles that can hold a fixed position.
          Multicopter (MC) vehicles actively brake and hold both position and altitude against wind and external forces.
          Hybrid MC/FW ("VTOL") vehicles first transition to multicopter mode (if needed) but otherwise behave in the same way as MC vehicles.
          Fixed-wing (FW) vehicles must not support this mode.
          Other vehicle types must not support this mode (this may be revisited through the PR process).
        </description>
      </entry>
      <entry value="2" name="MAV_STANDARD_MODE_ORBIT">
        <description>Orbit (manual).
          Position-controlled and stabilized manual mode.
          The vehicle circles around a fixed setpoint in the horizontal plane at a particular radius, altitude, and direction.
          Flight stacks may further allow manual control over the setpoint position, radius, direction, speed, and/or altitude of the circle, but this is not mandated.
          Flight stacks may support the [MAV_CMD_DO_ORBIT](https://mavlink.io/en/messages/common.html#MAV_CMD_DO_ORBIT) for changing the orbit parameters.
          MC and FW vehicles may support this mode.
          Hybrid MC/FW ("VTOL") vehicles may support this mode in MC/FW or both modes; if the mode is not supported by the current configuration the vehicle should transition to the supported configuration.
          Other vehicle types must not support this mode (this may be revisited through the PR process).
        </description>
      </entry>
      <entry value="3" name="MAV_STANDARD_MODE_CRUISE">
        <description>Cruise mode (manual).
          Position-controlled and stabilized manual mode.
          When sticks are released vehicles return to their level-flight orientation and hold their original track against wind and external forces.
          Fixed-wing (FW) vehicles level orientation and maintain current track and altitude against wind and external forces.
          Hybrid MC/FW ("VTOL") vehicles first transition to FW mode (if needed) but otherwise behave in the same way as MC vehicles.
          Multicopter (MC) vehicles must not support this mode.
          Other vehicle types must not support this mode (this may be revisited through the PR process).
        </description>
      </entry>
      <entry value="4" name="MAV_STANDARD_MODE_ALTITUDE_HOLD">
        <description>Altitude hold (manual).
          Altitude-controlled and stabilized manual mode.
          When sticks are released vehicles return to their level-flight orientation and hold their altitude.
          MC vehicles continue with existing momentum and may move with wind (or other external forces).
          FW vehicles continue with current heading, but may be moved off-track by wind.
          Hybrid MC/FW ("VTOL") vehicles behave according to their current configuration/mode (FW or MC).
          Other vehicle types must not support this mode (this may be revisited through the PR process).
        </description>
      </entry>
      <entry value="5" name="MAV_STANDARD_MODE_RETURN_HOME">
        <description>Return home mode (auto).
          Automatic mode that returns vehicle to home via a safe flight path.
          It may also automatically land the vehicle (i.e. RTL).
          The precise flight path and landing behaviour depend on vehicle configuration and type.
        </description>
      </entry>
      <entry value="6" name="MAV_STANDARD_MODE_SAFE_RECOVERY">
        <description>Safe recovery mode (auto).
          Automatic mode that takes vehicle to a predefined safe location via a safe flight path (rally point or mission defined landing) .
          It may also automatically land the vehicle.
          The precise return location, flight path, and landing behaviour depend on vehicle configuration and type.
        </description>
      </entry>
      <entry value="7" name="MAV_STANDARD_MODE_MISSION">
        <description>Mission mode (automatic).
          Automatic mode that executes MAVLink missions.
          Missions are executed from the current waypoint as soon as the mode is enabled.
        </description>
      </entry>
      <entry value="8" name="MAV_STANDARD_MODE_LAND">
        <description>Land mode (auto).
          Automatic mode that lands the vehicle at the current location.
          The precise landing behaviour depends on vehicle configuration and type.
        </description>
      </entry>
      <entry value="9" name="MAV_STANDARD_MODE_TAKEOFF">
        <description>Takeoff mode (auto).
          Automatic takeoff mode.
          The precise takeoff behaviour depends on vehicle configuration and type.
        </description>
      </entry>
    </enum>
    <!-- The MAV_CMD enum entries describe either: -->
    <!--  * the data payload of mission items (as used in the MISSION_ITEM_INT message) -->
    <!--  * the data payload of mavlink commands (as used in the COMMAND_INT and COMMAND_LONG messages) -->
    <!-- ALL the entries in the MAV_CMD enum have a maximum of 7 parameters -->
    <enum name="MAV_CMD">
      <description>Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. NaN and INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current yaw or latitude rather than a specific value). See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries</description>
      <entry value="900" name="MAV_CMD_PARAM_TRANSACTION" hasLocation="false" isDestination="false">
        <description>Request to start or end a parameter transaction. Multiple kinds of transport layers can be used to exchange parameters in the transaction (param, param_ext and mavftp). The command response can either be a success/failure or an in progress in case the receiving side takes some time to apply the parameters.</description>
        <param index="1" label="Action" enum="PARAM_TRANSACTION_ACTION">Action to be performed (start, commit, cancel, etc.)</param>
        <param index="2" label="Transport" enum="PARAM_TRANSACTION_TRANSPORT">Possible transport layers to set and get parameters via mavlink during a parameter transaction.</param>
        <param index="3" label="Transaction ID">Identifier for a specific transaction.</param>
      </entry>
      <entry value="5010" name="MAV_CMD_SET_FENCE_BREACH_ACTION" hasLocation="false" isDestination="false">
        <description>Sets the action on geofence breach.
          If sent using the command protocol this sets the system-default geofence action.
          As part of a mission protocol plan it sets the fence action for the next complete geofence definition *after* the command.
          Note: A fence action defined in a plan will override the default system setting (even if the system-default is `FENCE_ACTION_NONE`).
          Note: Every geofence in a plan can have its own action; if no fence action is defined for a particular fence the system-default will be used.
          Note: The flight stack should reject a plan or command that uses a geofence action that it does not support and send a STATUSTEXT with the reason.
        </description>
        <param index="1" label="Action" enum="FENCE_ACTION">Fence action on breach.</param>
      </entry>
    </enum>
    <enum name="MAV_CMD">
      <entry value="247" name="MAV_CMD_DO_UPGRADE" hasLocation="false" isDestination="false">
        <description>Request a target system to start an upgrade of one (or all) of its components.
          For example, the command might be sent to a companion computer to cause it to upgrade a connected flight controller.
          The system doing the upgrade will report progress using the normal command protocol sequence for a long running operation.
          Command protocol information: https://mavlink.io/en/services/command.html.</description>
        <param index="1" label="Component ID" enum="MAV_COMPONENT">Component id of the component to be upgraded. If set to 0, all components should be upgraded.</param>
        <param index="2" label="Reboot" minValue="0" maxValue="1" increment="1">0: Do not reboot component after the action is executed, 1: Reboot component after the action is executed.</param>
        <param index="3">Reserved</param>
        <param index="4">Reserved</param>
        <param index="5">Reserved</param>
        <param index="6">Reserved</param>
        <param index="7">WIP: upgrade progress report rate (can be used for more granular control).</param>
      </entry>
      <entry value="301" name="MAV_CMD_GROUP_START" hasLocation="false" isDestination="false">
        <description>Define start of a group of mission items. When control reaches this command a GROUP_START message is emitted.
          The end of a group is marked using MAV_CMD_GROUP_END with the same group id.
          Group ids are expected, but not required, to iterate sequentially.
          Groups can be nested.</description>
        <param index="1" label="Group ID" minValue="0" maxValue="16777216" increment="1">Mission-unique group id.
          Group id is limited because only 24 bit integer can be stored in 32 bit float.</param>
      </entry>
      <entry value="302" name="MAV_CMD_GROUP_END" hasLocation="false" isDestination="false">
        <description>Define end of a group of mission items. When control reaches this command a GROUP_END message is emitted.
          The start of the group is marked is marked using MAV_CMD_GROUP_START with the same group id.
          Group ids are expected, but not required, to iterate sequentially.
          Groups can be nested.</description>
        <param index="1" label="Group ID" minValue="0" maxValue="16777216" increment="1">Mission-unique group id.
          Group id is limited because only 24 bit integer can be stored in 32 bit float.</param>
      </entry>
      <entry value="262" name="MAV_CMD_DO_SET_STANDARD_MODE" hasLocation="false" isDestination="false">
        <description>Enable the specified standard MAVLink mode.
          If the mode is not supported the vehicle should ACK with MAV_RESULT_FAILED.
        </description>
        <param index="1" label="Standard Mode" enum="MAV_STANDARD_MODE">The mode to set.</param>
        <param index="2" reserved="true" default="0"/>
        <param index="3" reserved="true" default="0"/>
        <param index="4" reserved="true" default="0"/>
        <param index="5" reserved="true" default="0"/>
        <param index="6" reserved="true" default="0"/>
        <param index="7" reserved="true" default="NaN"/>
      </entry>
    </enum>
  </enums>
  <messages>
    <!-- Transactions for parameter protocol -->
    <message id="19" name="PARAM_ACK_TRANSACTION">
      <description>Response from a PARAM_SET message when it is used in a transaction.</description>
      <field type="uint8_t" name="target_system">Id of system that sent PARAM_SET message.</field>
      <field type="uint8_t" name="target_component">Id of system that sent PARAM_SET message.</field>
      <field type="char[16]" name="param_id">Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
      <field type="float" name="param_value">Parameter value (new value if PARAM_ACCEPTED, current value otherwise)</field>
      <field type="uint8_t" name="param_type" enum="MAV_PARAM_TYPE">Parameter type.</field>
      <field type="uint8_t" name="param_result" enum="PARAM_ACK">Result code.</field>
    </message>
    <!-- mission protocol enhancements -->
    <message id="52" name="MISSION_CHANGED">
      <description>A broadcast message to notify any ground station or SDK if a mission, geofence or safe points have changed on the vehicle.</description>
      <field type="int16_t" name="start_index">Start index for partial mission change (-1 for all items).</field>
      <field type="int16_t" name="end_index">End index of a partial mission change. -1 is a synonym for the last mission item (i.e. selects all items from start_index). Ignore field if start_index=-1.</field>
      <field type="uint8_t" name="origin_sysid">System ID of the author of the new mission.</field>
      <field type="uint8_t" name="origin_compid" enum="MAV_COMPONENT">Compnent ID of the author of the new mission.</field>
      <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="53" name="MISSION_CHECKSUM">
      <description>Checksum for the current mission, rally point or geofence plan, or for the "combined" plan (a GCS can use these checksums to determine if it has matching plans).
        This message must be broadcast with the appropriate checksum following any change to a mission, geofence or rally point definition
        (immediately after the MISSION_ACK that completes the upload sequence).
        It may also be requested using MAV_CMD_REQUEST_MESSAGE, where param 2 indicates the plan type for which the checksum is required.
        The checksum must be calculated on the autopilot, but may also be calculated by the GCS.
        The checksum uses the same CRC32 algorithm as MAVLink FTP (https://mavlink.io/en/services/ftp.html#crc32-implementation).
        The checksum for a mission, geofence or rally point definition is run over each item in the plan in seq order (excluding the home location if present in the plan), and covers the following fields (in order):
        frame, command, autocontinue, param1, param2, param3, param4, param5, param6, param7.
        The checksum for the whole plan (MAV_MISSION_TYPE_ALL) is calculated using the same approach, running over each sub-plan in the following order: mission, geofence then rally point.
      </description>
      <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
      <field type="uint32_t" name="checksum">CRC32 checksum of current plan for specified type.</field>
    </message>
    <message id="295" name="AIRSPEED">
      <description>Airspeed information from a sensor.</description>
      <field type="uint8_t" name="id" instance="true">Sensor ID.</field>
      <field type="float" name="airspeed" units="m/s">Calibrated airspeed (CAS) if available, otherwise indicated airspeed (IAS).</field>
      <field type="int16_t" name="temperature" units="cdegC">Temperature. INT16_MAX for value unknown/not supplied.</field>
      <field type="float" name="press_diff" units="hPa">Differential pressure. NaN for value unknown/not supplied.</field>
      <field type="float" name="press_static" units="hPa">Static pressure. NaN for value unknown/not supplied.</field>
      <field type="float" name="error" units="m/s">Error/accuracy. NaN for value unknown/not supplied.</field>
      <field type="uint8_t" name="type" enum="AIRSPEED_SENSOR_TYPE">Airspeed sensor type. NaN for value unknown/not supplied. Used to estimate accuracy (i.e. as an alternative to using the error field).</field>
    </message>
    <message id="298" name="WIFI_NETWORK_INFO">
      <description>Detected WiFi network status information. This message is sent per each WiFi network detected in range with known SSID and general status parameters.</description>
      <field type="char[32]" name="ssid">Name of Wi-Fi network (SSID).</field>
      <field type="uint8_t" name="channel_id">WiFi network operating channel ID. Set to 0 if unknown or unidentified.</field>
      <field type="uint8_t" name="signal_quality" units="%">WiFi network signal quality.</field>
      <field type="uint16_t" name="data_rate" units="MiB/s">WiFi network data rate. Set to UINT16_MAX if data_rate information is not supplied.</field>
      <field type="uint8_t" name="security" enum="WIFI_NETWORK_SECURITY">WiFi network security type.</field>
    </message>
    <message id="396" name="COMPONENT_INFORMATION_BASIC">
      <description>Basic component information data.</description>
      <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
      <field type="uint8_t[32]" name="vendor_name">Name of the component vendor</field>
      <field type="uint8_t[32]" name="model_name">Name of the component model</field>
      <field type="char[24]" name="software_version">Sofware version. The version format can be custom, recommended is SEMVER 'major.minor.patch'.</field>
      <field type="char[24]" name="hardware_version">Hardware version. The version format can be custom, recommended is SEMVER 'major.minor.patch'.</field>
      <field type="uint64_t" name="capabilities" enum="MAV_PROTOCOL_CAPABILITY" display="bitmask">Component capability flags</field>
    </message>
    <message id="414" name="GROUP_START">
      <description>Emitted during mission execution when control reaches MAV_CMD_GROUP_START.</description>
      <field type="uint32_t" name="group_id">Mission-unique group id (from MAV_CMD_GROUP_START).</field>
      <field type="uint32_t" name="mission_checksum">CRC32 checksum of current plan for MAV_MISSION_TYPE_ALL. As defined in MISSION_CHECKSUM message.</field>
      <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot).
        The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.</field>
    </message>
    <message id="415" name="GROUP_END">
      <description>Emitted during mission execution when control reaches MAV_CMD_GROUP_END.</description>
      <field type="uint32_t" name="group_id">Mission-unique group id (from MAV_CMD_GROUP_END).</field>
      <field type="uint32_t" name="mission_checksum">CRC32 checksum of current plan for MAV_MISSION_TYPE_ALL. As defined in MISSION_CHECKSUM message.</field>
      <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot).
        The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.</field>
    </message>
    <message id="435" name="AVAILABLE_MODES">
      <description>Get information about a particular flight modes.
        The message can be enumerated or requested for a particular mode using MAV_CMD_REQUEST_MESSAGE.
        Specify 0 in param2 to request that the message is emitted for all available modes or the specific index for just one mode.
        The modes must be available/settable for the current vehicle/frame type.
        Each modes should only be emitted once (even if it is both standard and custom).
      </description>
      <field type="uint8_t" name="number_modes">The total number of available modes for the current vehicle type.</field>
      <field type="uint8_t" name="mode_index">The current mode index within number_modes, indexed from 1.</field>
      <field type="uint8_t" name="standard_mode" enum="MAV_STANDARD_MODE">Standard mode.</field>
      <field type="uint8_t" name="base_mode" enum="MAV_MODE_FLAG" display="bitmask">System mode bitmap.</field>
      <field type="uint32_t" name="custom_mode">A bitfield for use for autopilot-specific flags</field>
      <field type="char[50]" name="mode_name">Name of custom mode, with null termination character. Should be omitted for standard modes.</field>
    </message>
    <message id="436" name="CURRENT_MODE">
      <description>Get the current mode.
        This should be emitted on any mode change, and broadcast at low rate (nominally 0.5 Hz).
        It may be requested using MAV_CMD_REQUEST_MESSAGE.
      </description>
      <field type="uint8_t" name="standard_mode" enum="MAV_STANDARD_MODE">Standard mode.</field>
      <field type="uint8_t" name="base_mode" enum="MAV_MODE_FLAG" display="bitmask">System mode bitmap.</field>
      <field type="uint32_t" name="custom_mode">A bitfield for use for autopilot-specific flags</field>
    </message>
  </messages>
</mavlink>
